(** Allows JSON-formatted .quiz files to be generated by user *)

open Yojson.Basic.Util
open Quiz
open ANSITerminal

(* Alias for directory separator. *)
let slash = Filename.dir_sep

(** [strings_to_json ls] is a JSON representation of [ls]. *)
let strings_to_json (ls: string list) = `List (List.map (fun s -> `String s) ls)

(** [build_list f acc cats pref n] builds a length-[n] list [acc] that uses 
    function [f] and prefix [pref] to help create the ids for the elements
    of [acc]. *)
let rec build_list f acc cats pref n =
  if n = 0 then `List acc else
    let acc' = (f (pref ^ "id" ^ (string_of_int n)) cats)::acc in
    build_list f acc' cats pref (n-1)

(** [ans_list id cats] is a JSON representation of answers with [cats] 
    scoring categories*)
let ans_list id cats = 
  `Assoc ([("id", `String id); 
           ("text", `String ("Replace this text with your answer option. "^
                             "Replace values of categories below with 1 if "^
                             "this answer corresponds with said category"));
           ("value", `Assoc (List.map (fun c -> (c, `Int 0)) cats))])

(** [q id cats] is a JSON representation of a question with answers
    of [cats] scoring categories*)
let q id cats = 
  `Assoc ([("id", `String id); 
           ("text", `String "Replace this text with your question.");
           ("answers", build_list ans_list [] cats "ans" 4)])

(** [qa_list cats num_qs] is a JSON representation of [num_qs] question and
    answer lists with [cats] scoring categories *)
let qa_list cats num_qs =
  let n = int_of_string num_qs in 
  build_list q [] cats "q" n

(** [build_quiz fname title desc sub cats num_qs] creates a JSON-formatted
    .quiz file *)
let build_quiz fname title desc sub cats num_qs =
  let j = `Assoc ([("title", `String title);
                   ("desc", `String desc); 
                   ("subjective", `Bool sub); 
                   ("categories", (strings_to_json cats)); 
                   ("questions", (qa_list cats num_qs))]) in
  let file = open_out ("." ^ slash ^ "quizzes" ^ slash^ fname^".quiz") in
  Yojson.Basic.pretty_to_channel file j;
  close_out file

(** [prompt_string msg] returns user input after printing [msg]. *)
let prompt_string msg = print_string [] msg; read_line ()

(** [prompt_file ()] is the file name of a new .quiz file that does not already 
    exist in the directory  *)
let rec prompt_file () = 
  let fname = prompt_string "Enter new .quiz file name > " in
  if not (Sys.file_exists ("." ^ slash ^ "quizzes" ^ slash ^ fname ^ ".quiz"))
  then fname
  else
    (print_string [yellow] "Sorry, a quiz with that filename already exists!\n";
    prompt_file ())

(* [builder ()] prompts the user for details and executes the quiz builder *)
let builder () =
  print_string [Bold] "Create an ASKYQuiz!\n";
  let fname = prompt_file () in
  let title = prompt_string "\nEnter quiz title > " in
  let desc  = prompt_string "\nEnter quiz description > " in
  print_string [] "\nWill this quiz be (1) subjective e.g. personality quizzes \
                    or (2) non-subjective e.g. academic quizzes > ";
  let is_sub = (read_line () = "1") in
  let cats_list = if not is_sub then ["correct"] else
    let cats = prompt_string "\nWhat are the answer categories \
                              (comma-separated, no space after)? > " in
    String.split_on_char ',' cats
  in let num_qs = prompt_string "\nHow many questions will this quiz have? > "
  in build_quiz fname title desc is_sub cats_list num_qs;
  ignore(Unix.system ("vim ." ^ slash ^ "quizzes" ^ slash ^ fname ^ ".quiz"))
